# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from midgard.server.models.base_model_ import Model
from midgard.server import util


class GPUPowerReadingInfo(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, power_management: str=None, power_draw: float=None, power_limit: str=None, default_power_limit: str=None, min_power_limit: str=None, max_power_limit: str=None, power_state: str=None, unit: str=None):  # noqa: E501
        """GPUPowerReadingInfo - a model defined in Swagger

        :param power_management: The power_management of this GPUPowerReadingInfo.  # noqa: E501
        :type power_management: str
        :param power_draw: The power_draw of this GPUPowerReadingInfo.  # noqa: E501
        :type power_draw: float
        :param power_limit: The power_limit of this GPUPowerReadingInfo.  # noqa: E501
        :type power_limit: str
        :param default_power_limit: The default_power_limit of this GPUPowerReadingInfo.  # noqa: E501
        :type default_power_limit: str
        :param min_power_limit: The min_power_limit of this GPUPowerReadingInfo.  # noqa: E501
        :type min_power_limit: str
        :param max_power_limit: The max_power_limit of this GPUPowerReadingInfo.  # noqa: E501
        :type max_power_limit: str
        :param power_state: The power_state of this GPUPowerReadingInfo.  # noqa: E501
        :type power_state: str
        :param unit: The unit of this GPUPowerReadingInfo.  # noqa: E501
        :type unit: str
        """
        self.swagger_types = {
            'power_management': str,
            'power_draw': float,
            'power_limit': str,
            'default_power_limit': str,
            'min_power_limit': str,
            'max_power_limit': str,
            'power_state': str,
            'unit': str
        }

        self.attribute_map = {
            'power_management': 'powerManagement',
            'power_draw': 'powerDraw',
            'power_limit': 'powerLimit',
            'default_power_limit': 'defaultPowerLimit',
            'min_power_limit': 'minPowerLimit',
            'max_power_limit': 'maxPowerLimit',
            'power_state': 'powerState',
            'unit': 'unit'
        }
        self._power_management = power_management
        self._power_draw = power_draw
        self._power_limit = power_limit
        self._default_power_limit = default_power_limit
        self._min_power_limit = min_power_limit
        self._max_power_limit = max_power_limit
        self._power_state = power_state
        self._unit = unit

    @classmethod
    def from_dict(cls, dikt) -> 'GPUPowerReadingInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The GPUPowerReadingInfo of this GPUPowerReadingInfo.  # noqa: E501
        :rtype: GPUPowerReadingInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def power_management(self) -> str:
        """Gets the power_management of this GPUPowerReadingInfo.


        :return: The power_management of this GPUPowerReadingInfo.
        :rtype: str
        """
        return self._power_management

    @power_management.setter
    def power_management(self, power_management: str):
        """Sets the power_management of this GPUPowerReadingInfo.


        :param power_management: The power_management of this GPUPowerReadingInfo.
        :type power_management: str
        """

        self._power_management = power_management

    @property
    def power_draw(self) -> float:
        """Gets the power_draw of this GPUPowerReadingInfo.


        :return: The power_draw of this GPUPowerReadingInfo.
        :rtype: float
        """
        return self._power_draw

    @power_draw.setter
    def power_draw(self, power_draw: float):
        """Sets the power_draw of this GPUPowerReadingInfo.


        :param power_draw: The power_draw of this GPUPowerReadingInfo.
        :type power_draw: float
        """

        self._power_draw = power_draw

    @property
    def power_limit(self) -> str:
        """Gets the power_limit of this GPUPowerReadingInfo.


        :return: The power_limit of this GPUPowerReadingInfo.
        :rtype: str
        """
        return self._power_limit

    @power_limit.setter
    def power_limit(self, power_limit: str):
        """Sets the power_limit of this GPUPowerReadingInfo.


        :param power_limit: The power_limit of this GPUPowerReadingInfo.
        :type power_limit: str
        """

        self._power_limit = power_limit

    @property
    def default_power_limit(self) -> str:
        """Gets the default_power_limit of this GPUPowerReadingInfo.


        :return: The default_power_limit of this GPUPowerReadingInfo.
        :rtype: str
        """
        return self._default_power_limit

    @default_power_limit.setter
    def default_power_limit(self, default_power_limit: str):
        """Sets the default_power_limit of this GPUPowerReadingInfo.


        :param default_power_limit: The default_power_limit of this GPUPowerReadingInfo.
        :type default_power_limit: str
        """

        self._default_power_limit = default_power_limit

    @property
    def min_power_limit(self) -> str:
        """Gets the min_power_limit of this GPUPowerReadingInfo.


        :return: The min_power_limit of this GPUPowerReadingInfo.
        :rtype: str
        """
        return self._min_power_limit

    @min_power_limit.setter
    def min_power_limit(self, min_power_limit: str):
        """Sets the min_power_limit of this GPUPowerReadingInfo.


        :param min_power_limit: The min_power_limit of this GPUPowerReadingInfo.
        :type min_power_limit: str
        """

        self._min_power_limit = min_power_limit

    @property
    def max_power_limit(self) -> str:
        """Gets the max_power_limit of this GPUPowerReadingInfo.


        :return: The max_power_limit of this GPUPowerReadingInfo.
        :rtype: str
        """
        return self._max_power_limit

    @max_power_limit.setter
    def max_power_limit(self, max_power_limit: str):
        """Sets the max_power_limit of this GPUPowerReadingInfo.


        :param max_power_limit: The max_power_limit of this GPUPowerReadingInfo.
        :type max_power_limit: str
        """

        self._max_power_limit = max_power_limit

    @property
    def power_state(self) -> str:
        """Gets the power_state of this GPUPowerReadingInfo.


        :return: The power_state of this GPUPowerReadingInfo.
        :rtype: str
        """
        return self._power_state

    @power_state.setter
    def power_state(self, power_state: str):
        """Sets the power_state of this GPUPowerReadingInfo.


        :param power_state: The power_state of this GPUPowerReadingInfo.
        :type power_state: str
        """

        self._power_state = power_state

    @property
    def unit(self) -> str:
        """Gets the unit of this GPUPowerReadingInfo.


        :return: The unit of this GPUPowerReadingInfo.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit: str):
        """Sets the unit of this GPUPowerReadingInfo.


        :param unit: The unit of this GPUPowerReadingInfo.
        :type unit: str
        """

        self._unit = unit
