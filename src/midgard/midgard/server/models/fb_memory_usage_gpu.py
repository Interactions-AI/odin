# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from midgard.server.models.base_model_ import Model
from midgard.server import util


class FBMemoryUsageGPU(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, total: float=None, used: float=None, free: float=None, unit: str=None):  # noqa: E501
        """FBMemoryUsageGPU - a model defined in Swagger

        :param total: The total of this FBMemoryUsageGPU.  # noqa: E501
        :type total: float
        :param used: The used of this FBMemoryUsageGPU.  # noqa: E501
        :type used: float
        :param free: The free of this FBMemoryUsageGPU.  # noqa: E501
        :type free: float
        :param unit: The unit of this FBMemoryUsageGPU.  # noqa: E501
        :type unit: str
        """
        self.swagger_types = {
            'total': float,
            'used': float,
            'free': float,
            'unit': str
        }

        self.attribute_map = {
            'total': 'total',
            'used': 'used',
            'free': 'free',
            'unit': 'unit'
        }
        self._total = total
        self._used = used
        self._free = free
        self._unit = unit

    @classmethod
    def from_dict(cls, dikt) -> 'FBMemoryUsageGPU':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The FBMemoryUsageGPU of this FBMemoryUsageGPU.  # noqa: E501
        :rtype: FBMemoryUsageGPU
        """
        return util.deserialize_model(dikt, cls)

    @property
    def total(self) -> float:
        """Gets the total of this FBMemoryUsageGPU.


        :return: The total of this FBMemoryUsageGPU.
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total: float):
        """Sets the total of this FBMemoryUsageGPU.


        :param total: The total of this FBMemoryUsageGPU.
        :type total: float
        """

        self._total = total

    @property
    def used(self) -> float:
        """Gets the used of this FBMemoryUsageGPU.


        :return: The used of this FBMemoryUsageGPU.
        :rtype: float
        """
        return self._used

    @used.setter
    def used(self, used: float):
        """Sets the used of this FBMemoryUsageGPU.


        :param used: The used of this FBMemoryUsageGPU.
        :type used: float
        """

        self._used = used

    @property
    def free(self) -> float:
        """Gets the free of this FBMemoryUsageGPU.


        :return: The free of this FBMemoryUsageGPU.
        :rtype: float
        """
        return self._free

    @free.setter
    def free(self, free: float):
        """Sets the free of this FBMemoryUsageGPU.


        :param free: The free of this FBMemoryUsageGPU.
        :type free: float
        """

        self._free = free

    @property
    def unit(self) -> str:
        """Gets the unit of this FBMemoryUsageGPU.


        :return: The unit of this FBMemoryUsageGPU.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit: str):
        """Sets the unit of this FBMemoryUsageGPU.


        :param unit: The unit of this FBMemoryUsageGPU.
        :type unit: str
        """

        self._unit = unit
