# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class PipelineCleanupDefinition(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, task_id: str=None, cleaned_from_k8s: bool=None, purged_from_db: bool=None, removed_from_fs: bool=None):  # noqa: E501
        """PipelineCleanupDefinition - a model defined in Swagger

        :param task_id: The task_id of this PipelineCleanupDefinition.  # noqa: E501
        :type task_id: str
        :param cleaned_from_k8s: The cleaned_from_k8s of this PipelineCleanupDefinition.  # noqa: E501
        :type cleaned_from_k8s: bool
        :param purged_from_db: The purged_from_db of this PipelineCleanupDefinition.  # noqa: E501
        :type purged_from_db: bool
        :param removed_from_fs: The removed_from_fs of this PipelineCleanupDefinition.  # noqa: E501
        :type removed_from_fs: bool
        """
        self.swagger_types = {
            'task_id': str,
            'cleaned_from_k8s': bool,
            'purged_from_db': bool,
            'removed_from_fs': bool
        }

        self.attribute_map = {
            'task_id': 'taskId',
            'cleaned_from_k8s': 'cleanedFromK8s',
            'purged_from_db': 'purgedFromDb',
            'removed_from_fs': 'removedFromFs'
        }
        self._task_id = task_id
        self._cleaned_from_k8s = cleaned_from_k8s
        self._purged_from_db = purged_from_db
        self._removed_from_fs = removed_from_fs

    @classmethod
    def from_dict(cls, dikt) -> 'PipelineCleanupDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PipelineCleanupDefinition of this PipelineCleanupDefinition.  # noqa: E501
        :rtype: PipelineCleanupDefinition
        """
        return util.deserialize_model(dikt, cls)

    @property
    def task_id(self) -> str:
        """Gets the task_id of this PipelineCleanupDefinition.


        :return: The task_id of this PipelineCleanupDefinition.
        :rtype: str
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id: str):
        """Sets the task_id of this PipelineCleanupDefinition.


        :param task_id: The task_id of this PipelineCleanupDefinition.
        :type task_id: str
        """

        self._task_id = task_id

    @property
    def cleaned_from_k8s(self) -> bool:
        """Gets the cleaned_from_k8s of this PipelineCleanupDefinition.


        :return: The cleaned_from_k8s of this PipelineCleanupDefinition.
        :rtype: bool
        """
        return self._cleaned_from_k8s

    @cleaned_from_k8s.setter
    def cleaned_from_k8s(self, cleaned_from_k8s: bool):
        """Sets the cleaned_from_k8s of this PipelineCleanupDefinition.


        :param cleaned_from_k8s: The cleaned_from_k8s of this PipelineCleanupDefinition.
        :type cleaned_from_k8s: bool
        """

        self._cleaned_from_k8s = cleaned_from_k8s

    @property
    def purged_from_db(self) -> bool:
        """Gets the purged_from_db of this PipelineCleanupDefinition.


        :return: The purged_from_db of this PipelineCleanupDefinition.
        :rtype: bool
        """
        return self._purged_from_db

    @purged_from_db.setter
    def purged_from_db(self, purged_from_db: bool):
        """Sets the purged_from_db of this PipelineCleanupDefinition.


        :param purged_from_db: The purged_from_db of this PipelineCleanupDefinition.
        :type purged_from_db: bool
        """

        self._purged_from_db = purged_from_db

    @property
    def removed_from_fs(self) -> bool:
        """Gets the removed_from_fs of this PipelineCleanupDefinition.


        :return: The removed_from_fs of this PipelineCleanupDefinition.
        :rtype: bool
        """
        return self._removed_from_fs

    @removed_from_fs.setter
    def removed_from_fs(self, removed_from_fs: bool):
        """Sets the removed_from_fs of this PipelineCleanupDefinition.


        :param removed_from_fs: The removed_from_fs of this PipelineCleanupDefinition.
        :type removed_from_fs: bool
        """

        self._removed_from_fs = removed_from_fs
