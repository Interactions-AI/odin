# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.key_value_definition import KeyValueDefinition  # noqa: F401,E501
from swagger_server.models.volume_mount_definition import VolumeMountDefinition  # noqa: F401,E501
from swagger_server import util


class TaskDefinition(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: str=None, name: str=None, image: str=None, command: str=None, args: List[str]=None, mounts: List[VolumeMountDefinition]=None, num_gpus: int=None, pull_policy: str=None, node_selector: List[KeyValueDefinition]=None, resource_type: str=None, num_workers: int=None, depends: List[str]=None, inputs: List[str]=None, outputs: List[str]=None):  # noqa: E501
        """TaskDefinition - a model defined in Swagger

        :param id: The id of this TaskDefinition.  # noqa: E501
        :type id: str
        :param name: The name of this TaskDefinition.  # noqa: E501
        :type name: str
        :param image: The image of this TaskDefinition.  # noqa: E501
        :type image: str
        :param command: The command of this TaskDefinition.  # noqa: E501
        :type command: str
        :param args: The args of this TaskDefinition.  # noqa: E501
        :type args: List[str]
        :param mounts: The mounts of this TaskDefinition.  # noqa: E501
        :type mounts: List[VolumeMountDefinition]
        :param num_gpus: The num_gpus of this TaskDefinition.  # noqa: E501
        :type num_gpus: int
        :param pull_policy: The pull_policy of this TaskDefinition.  # noqa: E501
        :type pull_policy: str
        :param node_selector: The node_selector of this TaskDefinition.  # noqa: E501
        :type node_selector: List[KeyValueDefinition]
        :param resource_type: The resource_type of this TaskDefinition.  # noqa: E501
        :type resource_type: str
        :param num_workers: The num_workers of this TaskDefinition.  # noqa: E501
        :type num_workers: int
        :param depends: The depends of this TaskDefinition.  # noqa: E501
        :type depends: List[str]
        :param inputs: The inputs of this TaskDefinition.  # noqa: E501
        :type inputs: List[str]
        :param outputs: The outputs of this TaskDefinition.  # noqa: E501
        :type outputs: List[str]
        """
        self.swagger_types = {
            'id': str,
            'name': str,
            'image': str,
            'command': str,
            'args': List[str],
            'mounts': List[VolumeMountDefinition],
            'num_gpus': int,
            'pull_policy': str,
            'node_selector': List[KeyValueDefinition],
            'resource_type': str,
            'num_workers': int,
            'depends': List[str],
            'inputs': List[str],
            'outputs': List[str]
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'image': 'image',
            'command': 'command',
            'args': 'args',
            'mounts': 'mounts',
            'num_gpus': 'numGpus',
            'pull_policy': 'pullPolicy',
            'node_selector': 'nodeSelector',
            'resource_type': 'resourceType',
            'num_workers': 'numWorkers',
            'depends': 'depends',
            'inputs': 'inputs',
            'outputs': 'outputs'
        }
        self._id = id
        self._name = name
        self._image = image
        self._command = command
        self._args = args
        self._mounts = mounts
        self._num_gpus = num_gpus
        self._pull_policy = pull_policy
        self._node_selector = node_selector
        self._resource_type = resource_type
        self._num_workers = num_workers
        self._depends = depends
        self._inputs = inputs
        self._outputs = outputs

    @classmethod
    def from_dict(cls, dikt) -> 'TaskDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The TaskDefinition of this TaskDefinition.  # noqa: E501
        :rtype: TaskDefinition
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this TaskDefinition.


        :return: The id of this TaskDefinition.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this TaskDefinition.


        :param id: The id of this TaskDefinition.
        :type id: str
        """

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this TaskDefinition.


        :return: The name of this TaskDefinition.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this TaskDefinition.


        :param name: The name of this TaskDefinition.
        :type name: str
        """

        self._name = name

    @property
    def image(self) -> str:
        """Gets the image of this TaskDefinition.


        :return: The image of this TaskDefinition.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image: str):
        """Sets the image of this TaskDefinition.


        :param image: The image of this TaskDefinition.
        :type image: str
        """

        self._image = image

    @property
    def command(self) -> str:
        """Gets the command of this TaskDefinition.


        :return: The command of this TaskDefinition.
        :rtype: str
        """
        return self._command

    @command.setter
    def command(self, command: str):
        """Sets the command of this TaskDefinition.


        :param command: The command of this TaskDefinition.
        :type command: str
        """

        self._command = command

    @property
    def args(self) -> List[str]:
        """Gets the args of this TaskDefinition.


        :return: The args of this TaskDefinition.
        :rtype: List[str]
        """
        return self._args

    @args.setter
    def args(self, args: List[str]):
        """Sets the args of this TaskDefinition.


        :param args: The args of this TaskDefinition.
        :type args: List[str]
        """

        self._args = args

    @property
    def mounts(self) -> List[VolumeMountDefinition]:
        """Gets the mounts of this TaskDefinition.


        :return: The mounts of this TaskDefinition.
        :rtype: List[VolumeMountDefinition]
        """
        return self._mounts

    @mounts.setter
    def mounts(self, mounts: List[VolumeMountDefinition]):
        """Sets the mounts of this TaskDefinition.


        :param mounts: The mounts of this TaskDefinition.
        :type mounts: List[VolumeMountDefinition]
        """

        self._mounts = mounts

    @property
    def num_gpus(self) -> int:
        """Gets the num_gpus of this TaskDefinition.


        :return: The num_gpus of this TaskDefinition.
        :rtype: int
        """
        return self._num_gpus

    @num_gpus.setter
    def num_gpus(self, num_gpus: int):
        """Sets the num_gpus of this TaskDefinition.


        :param num_gpus: The num_gpus of this TaskDefinition.
        :type num_gpus: int
        """

        self._num_gpus = num_gpus

    @property
    def pull_policy(self) -> str:
        """Gets the pull_policy of this TaskDefinition.


        :return: The pull_policy of this TaskDefinition.
        :rtype: str
        """
        return self._pull_policy

    @pull_policy.setter
    def pull_policy(self, pull_policy: str):
        """Sets the pull_policy of this TaskDefinition.


        :param pull_policy: The pull_policy of this TaskDefinition.
        :type pull_policy: str
        """

        self._pull_policy = pull_policy

    @property
    def node_selector(self) -> List[KeyValueDefinition]:
        """Gets the node_selector of this TaskDefinition.


        :return: The node_selector of this TaskDefinition.
        :rtype: List[KeyValueDefinition]
        """
        return self._node_selector

    @node_selector.setter
    def node_selector(self, node_selector: List[KeyValueDefinition]):
        """Sets the node_selector of this TaskDefinition.


        :param node_selector: The node_selector of this TaskDefinition.
        :type node_selector: List[KeyValueDefinition]
        """

        self._node_selector = node_selector

    @property
    def resource_type(self) -> str:
        """Gets the resource_type of this TaskDefinition.


        :return: The resource_type of this TaskDefinition.
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type: str):
        """Sets the resource_type of this TaskDefinition.


        :param resource_type: The resource_type of this TaskDefinition.
        :type resource_type: str
        """
        allowed_values = ["Pod", "Job", "TFJob", "PyTorchJob", "MPIJob"]  # noqa: E501
        if resource_type not in allowed_values:
            raise ValueError(
                "Invalid value for `resource_type` ({0}), must be one of {1}"
                .format(resource_type, allowed_values)
            )

        self._resource_type = resource_type

    @property
    def num_workers(self) -> int:
        """Gets the num_workers of this TaskDefinition.


        :return: The num_workers of this TaskDefinition.
        :rtype: int
        """
        return self._num_workers

    @num_workers.setter
    def num_workers(self, num_workers: int):
        """Sets the num_workers of this TaskDefinition.


        :param num_workers: The num_workers of this TaskDefinition.
        :type num_workers: int
        """

        self._num_workers = num_workers

    @property
    def depends(self) -> List[str]:
        """Gets the depends of this TaskDefinition.


        :return: The depends of this TaskDefinition.
        :rtype: List[str]
        """
        return self._depends

    @depends.setter
    def depends(self, depends: List[str]):
        """Sets the depends of this TaskDefinition.


        :param depends: The depends of this TaskDefinition.
        :type depends: List[str]
        """

        self._depends = depends

    @property
    def inputs(self) -> List[str]:
        """Gets the inputs of this TaskDefinition.


        :return: The inputs of this TaskDefinition.
        :rtype: List[str]
        """
        return self._inputs

    @inputs.setter
    def inputs(self, inputs: List[str]):
        """Sets the inputs of this TaskDefinition.


        :param inputs: The inputs of this TaskDefinition.
        :type inputs: List[str]
        """

        self._inputs = inputs

    @property
    def outputs(self) -> List[str]:
        """Gets the outputs of this TaskDefinition.


        :return: The outputs of this TaskDefinition.
        :rtype: List[str]
        """
        return self._outputs

    @outputs.setter
    def outputs(self, outputs: List[str]):
        """Sets the outputs of this TaskDefinition.


        :param outputs: The outputs of this TaskDefinition.
        :type outputs: List[str]
        """

        self._outputs = outputs
