# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class EventDefinition(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: str=None, event_type: str=None, reason: str=None, source: str=None, message: str=None, timestamp: datetime=None):  # noqa: E501
        """EventDefinition - a model defined in Swagger

        :param id: The id of this EventDefinition.  # noqa: E501
        :type id: str
        :param event_type: The event_type of this EventDefinition.  # noqa: E501
        :type event_type: str
        :param reason: The reason of this EventDefinition.  # noqa: E501
        :type reason: str
        :param source: The source of this EventDefinition.  # noqa: E501
        :type source: str
        :param message: The message of this EventDefinition.  # noqa: E501
        :type message: str
        :param timestamp: The timestamp of this EventDefinition.  # noqa: E501
        :type timestamp: datetime
        """
        self.swagger_types = {
            'id': str,
            'event_type': str,
            'reason': str,
            'source': str,
            'message': str,
            'timestamp': datetime
        }

        self.attribute_map = {
            'id': 'id',
            'event_type': 'eventType',
            'reason': 'reason',
            'source': 'source',
            'message': 'message',
            'timestamp': 'timestamp'
        }
        self._id = id
        self._event_type = event_type
        self._reason = reason
        self._source = source
        self._message = message
        self._timestamp = timestamp

    @classmethod
    def from_dict(cls, dikt) -> 'EventDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The EventDefinition of this EventDefinition.  # noqa: E501
        :rtype: EventDefinition
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this EventDefinition.


        :return: The id of this EventDefinition.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this EventDefinition.


        :param id: The id of this EventDefinition.
        :type id: str
        """

        self._id = id

    @property
    def event_type(self) -> str:
        """Gets the event_type of this EventDefinition.


        :return: The event_type of this EventDefinition.
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type: str):
        """Sets the event_type of this EventDefinition.


        :param event_type: The event_type of this EventDefinition.
        :type event_type: str
        """

        self._event_type = event_type

    @property
    def reason(self) -> str:
        """Gets the reason of this EventDefinition.


        :return: The reason of this EventDefinition.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason: str):
        """Sets the reason of this EventDefinition.


        :param reason: The reason of this EventDefinition.
        :type reason: str
        """

        self._reason = reason

    @property
    def source(self) -> str:
        """Gets the source of this EventDefinition.


        :return: The source of this EventDefinition.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source: str):
        """Sets the source of this EventDefinition.


        :param source: The source of this EventDefinition.
        :type source: str
        """

        self._source = source

    @property
    def message(self) -> str:
        """Gets the message of this EventDefinition.


        :return: The message of this EventDefinition.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message: str):
        """Sets the message of this EventDefinition.


        :param message: The message of this EventDefinition.
        :type message: str
        """

        self._message = message

    @property
    def timestamp(self) -> datetime:
        """Gets the timestamp of this EventDefinition.


        :return: The timestamp of this EventDefinition.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp: datetime):
        """Sets the timestamp of this EventDefinition.


        :param timestamp: The timestamp of this EventDefinition.
        :type timestamp: datetime
        """

        self._timestamp = timestamp
