# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ResourceDefinition(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, resource_type: str=None, version: str=None):  # noqa: E501
        """ResourceDefinition - a model defined in Swagger

        :param resource_type: The resource_type of this ResourceDefinition.  # noqa: E501
        :type resource_type: str
        :param version: The version of this ResourceDefinition.  # noqa: E501
        :type version: str
        """
        self.swagger_types = {
            'resource_type': str,
            'version': str
        }

        self.attribute_map = {
            'resource_type': 'resourceType',
            'version': 'version'
        }
        self._resource_type = resource_type
        self._version = version

    @classmethod
    def from_dict(cls, dikt) -> 'ResourceDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ResourceDefinition of this ResourceDefinition.  # noqa: E501
        :rtype: ResourceDefinition
        """
        return util.deserialize_model(dikt, cls)

    @property
    def resource_type(self) -> str:
        """Gets the resource_type of this ResourceDefinition.


        :return: The resource_type of this ResourceDefinition.
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type: str):
        """Sets the resource_type of this ResourceDefinition.


        :param resource_type: The resource_type of this ResourceDefinition.
        :type resource_type: str
        """
        allowed_values = ["Pod", "Job", "TFJob", "PyTorchJob", "MPIJob"]  # noqa: E501
        if resource_type not in allowed_values:
            raise ValueError(
                "Invalid value for `resource_type` ({0}), must be one of {1}"
                .format(resource_type, allowed_values)
            )

        self._resource_type = resource_type

    @property
    def version(self) -> str:
        """Gets the version of this ResourceDefinition.


        :return: The version of this ResourceDefinition.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version: str):
        """Sets the version of this ResourceDefinition.


        :param version: The version of this ResourceDefinition.
        :type version: str
        """

        self._version = version
